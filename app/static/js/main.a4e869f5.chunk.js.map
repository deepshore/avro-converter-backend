{"version":3,"sources":["HookForm.js","index.js"],"names":["HookForm","useForm","handleSubmit","register","formState","errors","isSubmitting","useState","avro","setAvro","useClipboard","hasCopied","onCopy","onSubmit","values","Promise","resolve","axios","post","validateStatus","then","res","avroString","JSON","stringify","data","console","log","isInvalid","name","htmlFor","id","placeholder","required","minLength","value","message","mt","colorScheme","isLoading","type","fontSize","mb","size","isReadOnly","onClick","ml","App","p","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wSAae,SAASA,IACtB,MAIIC,cAHFC,EADF,EACEA,aACAC,EAFF,EAEEA,SAFF,IAGEC,UAAaC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,aAIvB,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BC,YAAaF,GAAnCG,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAiBnB,OACE,eAAC,IAAD,WACE,uBAAMC,SAAUX,GAjBpB,SAAkBY,GAChB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,IACGC,KADH,UANW,oDAMX,gBACiCJ,EAAQ,CACrCK,eAAgB,kBAAM,KAEvBC,MAAK,SAACC,GACL,IAAMC,EAAaC,KAAKC,UAAUH,EAAII,KAAK,GAAI,KAAM,GACrDC,QAAQC,IAAIL,GACZb,EAAQa,GACRN,aAOJ,UACE,eAAC,IAAD,CAAaY,UAAWvB,EAAOwB,KAA/B,UACE,cAAC,IAAD,CAAWC,QAAQ,MAAnB,iBACA,cAAC,IAAD,aACEC,GAAG,MACHC,YAAY,0BACR7B,EAAS,MAAO,CAClB8B,SAAU,mBACVC,UAAW,CAAEC,MAAO,GAAIC,QAAS,kCAGrC,cAAC,IAAD,CAAWN,QAAQ,MAAnB,iBACA,cAAC,IAAD,aACEC,GAAG,MACHC,YAAY,qDACR7B,EAAS,MAAO,CAClB8B,SAAU,mBACVC,UAAW,CAAEC,MAAO,EAAGC,QAAS,kCAGpC,cAAC,IAAD,UACG/B,EAAOwB,MAAQxB,EAAOwB,KAAKO,aAGhC,cAAC,IAAD,CACEC,GAAI,EACJC,YAAY,SACZC,UAAWjC,EACXkC,KAAK,SAJP,uBASF,uBACA,cAAC,IAAD,CAAMC,SAAS,KAAf,kBACA,eAAC,IAAD,CAAMC,GAAI,EAAV,UACE,cAAC,IAAD,CACEV,YAAY,6DACZW,KAAK,KACLC,YAAU,EACVT,MAAO3B,IAET,cAAC,IAAD,CAAQqC,QAASjC,EAAQkC,GAAI,EAA7B,SACGnC,EAAY,SAAW,e,wCCtElC,SAASoC,IACP,OACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAKC,EAAG,EAAR,UACE,cAAC,IAAD,oCACA,eAAC,IAAD,sBACW,IACT,cAAC,IAAD,2EAEF,uBACA,cAAChD,EAAD,UAMR,IAAMiD,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACN,EAAD,IAASE,K","file":"static/js/main.a4e869f5.chunk.js","sourcesContent":["// author: Abhishek Kumar Singh - https://abheist.com/\n\nimport { useForm } from \"react-hook-form\";\nimport { Textarea, Text, Box, useClipboard, Flex } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Button\n} from \"@chakra-ui/react\";\n\nexport default function HookForm() {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting }\n  } = useForm();\n\n  const apiUrl = \"https://xsd2avro-3bsvapjrjq-ey.a.run.app/xsd2avro\";\n  const [avro, setAvro] = useState();\n  const { hasCopied, onCopy } = useClipboard(avro);\n\n  function onSubmit(values) {\n    return new Promise((resolve) => {\n      axios\n        .post(`${apiUrl}/connect/xsd`, values, {\n          validateStatus: () => true\n        })\n        .then((res) => {\n          const avroString = JSON.stringify(res.data[1], null, 2);\n          console.log(avroString);\n          setAvro(avroString);\n          resolve();\n        });\n    });\n  }\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor=\"xsd\">XSD</FormLabel>\n          <Textarea\n            id=\"xsd\"\n            placeholder=\"paste xsd content here\"\n            {...register(\"xsd\", {\n              required: \"This is required\",\n              minLength: { value: 20, message: \"Minimum length should be 4\" }\n            })}\n          />\n          <FormLabel htmlFor=\"xml\">XML</FormLabel>\n          <Textarea\n            id=\"xml\"\n            placeholder=\"paste xml with example data according to xsd here\"\n            {...register(\"xml\", {\n              required: \"This is required\",\n              minLength: { value: 4, message: \"Minimum length should be 4\" }\n            })}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <Button\n          mt={4}\n          colorScheme=\"yellow\"\n          isLoading={isSubmitting}\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </form>\n      <br />\n      <Text fontSize=\"lg\">Avro</Text>\n      <Flex mb={2}>\n        <Textarea\n          placeholder=\"Your avro schema will be shown here after pressing submit.\"\n          size=\"sm\"\n          isReadOnly\n          value={avro}\n        ></Textarea>\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? \"Copied\" : \"Copy\"}\n        </Button>\n      </Flex>\n    </Box>\n  );\n}\n","// author: Abhishek Kumar Singh - https://abheist.com/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport HookForm from \"./HookForm\";\nimport {\n  ChakraProvider,\n  CSSReset,\n  Box,\n  Heading,\n  Text,\n  Link\n} from \"@chakra-ui/react\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <CSSReset />\n      <Box p={4}>\n        <Heading>XSD to Avro Converter</Heading>\n        <Text>\n          Based on{\" \"}\n          <Link>https://github.com/jcustenborder/xjc-kafka-connect-plugin</Link>\n        </Text>\n        <br />\n        <HookForm />\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}