plugins {
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.2.1"
}

version = "0.1"
group = "de.deepshore.kafka"

repositories {
    maven {
        name = "deepshore/kafka-connect-transform-xml"
        url = uri("https://maven.pkg.github.com/deepshore/kafka-connect-transform-xml")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_DEPLOY_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_DEPLOY_TOKEN")
        }
    }
    maven {
        name = "deepshore/xjc-kafka-connect-plugin"
        url = uri("https://maven.pkg.github.com/deepshore/xjc-kafka-connect-plugin")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_DEPLOY_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_DEPLOY_TOKEN")
        }
    }
    maven {
        name = "confluent"
        url = uri("https://packages.confluent.io/maven/")
    }
    mavenCentral()
}

dependencies {
    implementation("com.github.jcustenborder.kafka.connect:kafka-connect-transform-xml:0.1.0-SNAPSHOT")
    implementation 'io.confluent:kafka-connect-avro-converter:7.0.1'

    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    implementation("com.github.jcustenborder.kafka.connect:kafka-connect-parent:2.8.0-1")


}


application {
    mainClass.set("de.deepshore.kafka.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

tasks {
    dockerfile {
        baseImage = "azul/zulu-openjdk-alpine:11"
    }
    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }
}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("de.deepshore.kafka.*")
    }
}


